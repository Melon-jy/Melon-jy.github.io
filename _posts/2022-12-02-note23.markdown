---
layout: post
title:  "Web browser, Java script"
date:   2022-12-02 9:27:33 +0900
categories: Post
---

## Script 태그 

* Java script는 대소문자나 괄호의 위치를 정확하게 적어야 함
* popular coding convention on github 라고 검색시 프로그래머들의 작성 스타일을 볼 수 있음

### console 출력

```
<html>

        HTMLcode       -> 랜더러
     <script>
        script code     ->
     </script>
        HTMLcode
     <script>
        script code
     </script>
         html code
</html>
```

* 위에서 아래로 순서대로 진행함
* console(object(객체)).log(function(함수))(값, 값, 값, 등등); 값(기능을 수행하는데 필요한 값=argument(인자), parameter라고도 한다)
* Web browser의 개발자 보드 콘솔창에 값을 출력한다.
* 값에 "aaa"'aaa' 을 문자열(string)이라고 한다, 30, 3.14는 숫자(number) 라고한다 true, false는 논리(boolean) 이라고 한다
* ex) 대한민국.서울.강남구.빌딩.사무실.전원을 on
* ex) 객체안에 다른 객체를 표현할 경우엔 .을 이용하여 표현하며 마지막에 함수(); 로 마무리한다
* ex) bitcamp.find("honggildong").phoneNumber();
* 위와 같이 함수 뒤에 함수가 들어가는 경우 리턴 객체에 대해 함수를 실행하라
* bitcamp(object).find(object)("honggildong"(리턴 객체)).PhoneNumber()(함수);


### 변수와 제어문


#### 변수 선언에 대한 문법 
* 변수 선언(variables), (declaration): 값을 저장할 메모리를 확보하는 명령문
* var 변수명;
* let 변수명;
* const 변수명;

#### 할당, 대입의 문법
* 할당, 대입(assignment): 메모리에 값을 저장
* 변수명 = 값;
* 변수명 = 변수명;
* 변수명 = 함수();
* 위에 =은 assignment operator 라고한다
* 값 = 변수에 들어있고 값 저장, 함수()=함수의 실행결과 저장


#### assignment operator(기능)
```
var size = 10;
var message = "hello";
message = true;
const PI = 3.14159
PI = 200;
let localVar = 100;
```
* 변수(l-value) = 변수(r-value), 값(r-value), 함수(r-value)
* const = 한번 저장 후 바꾸지 못함

#### for 반복문

```
for ((1)var i=0; (2)i < size ; (4)i++){
  (3)console.log(i, message);
  if (i==5){
  var working=true;
  break;
    }
}
```
* 반복문을 실행하는 동안 하용할 변수. 주로 반복문의 횟수를 제어하기 위해 선언
* (1)처음에 딱 한번만 실행
* (2)조건이 참이면 블록 안의 명령을 실행
* (3)조건이 맞지 않으면 실행하지 않는다
* (4)i메모리에 들어있는 값을 1 증가시킨다

#### function(함수)

* function = 특정 기능을 수행하도록 짜놓은 명령문을 묶어서 이름을 붙인 것.
* **묶어서 이름을 붙여 놓으면 필요할때 언제든 재실행 가능 => 코드 재사용성을 높이는 문법**

```
function (1)plus((2)a, b) {
  return (3)a+b;
}
console.log(plus(10, 20));

(4)var (7)sum = (6)plus((5)100, (5)200);
console.log (ok(100, 200));

var ok;
console.log(ok);

ok=plus;
conosole.log(ok(100, 200));

var haha = ok;
console.log(haha(1000,2000));

ok = "hello";
ok(100, 200);
```
* 위와 같은 것을 함수 정의(definition)라고 한다
* (1) 함수이름
* (2) parameter : argument를 받는 변수
* (3) 함수 실행 완료 후 리턴할 결과값
* (4) 함수 사용법(호출=call)
* (5) 함수를 실행시킬 때 넘겨주는 값(argument)
* (6) 함수호출
* (7) 함수의 리턴값을 저장
#### 중첩 함수 호출
```
(3)console.log (   (2)   )
```
* (1) 호출: plus() 함수 실행
* (2) 리턴 값을 놓는다
* (3) 실행
#### 함수 레퍼런스
* 객체 -> 레퍼런스 -> 주소 저장 -> 주소 = 객체

```
function plus(a, b) {
  return a+b;
}
console.log(plus(10, 20));

var sum = plus(100, 200);
console.log (ok(100, 200));

var ok;
console.log(ok);

ok=plus;
conosole.log(ok(100, 200));

var haha = ok;
console.log(haha(1000,2000));

ok = "hello";
ok(100, 200);
```
* plus :함수의 이름은, 함수의 주소를 보관하고 있는 변수다.
* RAM에는 명령문과 데이터를 저장한다.

#### static type binding vs dynamic type binding

* Java (static type binding): 변수 선언 할 때 메모리의 용도가 고정되어 있기 때문에 int 값만 저장 가능

* JavaScript : a=100; a는 정수변수, a="hello"; a는 숫자열 변수, a=true; a는 boolean 변수
* Javascript(dynamic type binding) : 값을 넣을때 변수의 유형이 바뀐다
* static type binding : language 류의 프로그래밍 언어에서 사용하고 엄격한 만큼 프로그래밍이 까다롭지만 유지보수가 쉽다
* dynamic type binding : script류의 프로그래밍 언어에서 주로 사용하고 자유로운만큼 프로그래밍이 쉽지만 유지보수가 어렵다
* static type binding : 긴 코드 큰 프로젝트
* dynamic type binding : 짧은 코드 작은 프로젝트

#### 객체(object) : 덩어리(변수+함수+객체)
```
var name = "홍길동";
var age = 20;
var working = false;


(key)      (value)
obj.name = "홍길동";
obj.age = 20;
obj.working = false;
obj.hello = function() {
  console.log("안녕하세요," + this.name + "님!");    
}
console.log(obj)
obj.hello();
```

* 이것에 대한 간결한 문법을 object literal이라고 한다

#### object literal
```
var obj = {
    name:"임꺽정",
    age:30,
    working:true,
    hello:funtion() {
        console.log("안녕하세요, " + this.name +"님!")
    }
    hello2() {
        console.log("안녕하세요, " + this.name + "님2!")
    }
};
```
* Literal : 값을 코드로 표현하는 문법
* 변수의 값이 저장된 적이 없는 상태 : undefined
* 객체가 주소가 없는 상태 : null

#### DOM API - getElementById()

* DOM : document(HTML), object(객체), model(객체를 구조로 만든 것)
```
var tag1 = document.getElemenById("btn1");

tag1.onclick:
```

* ↓ Document

```
<html>
    <head>
        <title>--</title>
    </head>
    <body>
        <h1>title</h1>
        <p>pppppp</p>
    </body>
</html>
```
* tag를 tree 구조로 객체화 시킨 것이 =model
* ↑ tag를 찾고, 변경하고, 추가하고, 삭제하기 쉽도록
* ↑↑ tag를 다루기 쉽도록 하기 위해서
* API = Application Programming Interface
* app을 프로그래밍 할 때 사용하는 도구
* DOM API : 태그를 다루는 프로그래밍 할 때 사용하는 도구

#### 객체, method(함수), 파라미터의 관계

```
(1)document.(2)getElementById((3)"태그 아이디")
```
```
(1)학생명단.(2)find((3)"홍길동")
```
* (1) 객체 : 기본데이터
* (2) 함수 : 작업자(operator)
* (3) 함수가 기본 데이터를 다룰때 사용할 값 : 작업에 사용하는 부가데이터
* (2->1) 함수가 일할때 참고할 데이터 : 학생 정보 덩어리(객체)
* 함수 = method = operator


#### 참고 Java Script 와 ECMA Script의 관계

#### 웹페이지 조립

* HTML을 part part로 조립하는 것
``` part1.html
<p>안녕하세요!!</p>
```

* header.html, main.html, footer.html 등의 part를 하나의 웹페이지에 삽입할 수 있음
``` exam06.HTML
<script>
var tag1 = document.getElementById('btn1')

tag1.onclick = function() {
  var xhr = new XMLHttpRequest(); // <== 서버에 따로 요청을 할 때 사용하는 도구
  xhr.open('GET', '/havascript/ex00/exam06', false); // <== 요청할 자우너의 경로 등을 설정한 후 서버와 연결
  xhr.send(); // <== 서버에 HTTP 요청 정보를 보낸다. 서버가 응답하면 함수를 종료하고 리턴한다.

  // 서버가 보낸 데이터를 div태그에 넣기
  var tag2 = document.getElementById('d1');
  tag2.innerHTML = xhr.responseText; // <==서버에 받아 온 응답 결과를 꺼내 <div> 태그에 넣는다
}
```
* 아래 코드를 위에 조립하여 넣는다
``` exam06-part1.HTML
<header></header>
<ul>
    <li>HTML</li>
    <li>CSS</li>
    <li>JavaScript</li>
</ul>
```

#### 서버에 자원을 요청 : server-side rendering vsclient-side rendering

* HTML에서 서버로 요청하고 서버에서 HTML을 보내고 그대로 HTML에 삽입한다 <= server-side rendering 방식 : 서버에서 HTML을 만들어 준다
* server-side rendering: ex)JSP, Thymleaf 등
* HTML에서 서버에 요청하고 서버에서 JSON이나 XML데이터를 보낸후 데이터를 받아서 HTML을 만들어 삽입한다 <= client-side rendering 방식: 클라이언트에서 HTML을 만든다 프론트엔드의 방식
* client-side rendering: ex)AJAX기술 -> 
```exam06
var ul = document.getElementById('title-list');
ul.innerHTML = xhr.responseText;


```
#### JSON 포맷
``` object literal
var obj = {
  name:"홍길도",
  age: 20,
  working:false,
  hello:function(){---
  }
}
```
* JavaScript의 object literal 문법을 참고해서 만든 포맷
```
{
   "name":"홍길동,
   "age":20,
   "working"=false
}
```
* JSON포맷

#### JSON Built-in Object
```
JSON. Parse(JSON 포맷 문자열)
```
* 자바 스크립트 객체
* JSON.staringify
```
for (var i = 0; i< title List.length; i++) {
  var li = document.createElent("li);
  li.innerHTML = titleList[i];
  ul.appendchild(li);
}
```












<br><br><br>

<div id="disqus_thread"></div>
<script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://melonweb.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>