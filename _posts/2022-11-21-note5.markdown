---
layout: post
title:  "리눅스VM 수업"
date:   2022-11-21 11:40:33 +0900
categories: jekyll update
---

# Vagrant project VS VirtureBox


* Host OS(windows OS) -> 사용자 -> 사용자 이름 폴더(home폴더)->VM-Project/
* host1-vm (VM 생성 프로젝트 폴더) / VagrantFile(설정-파일)
* Host OS->virtualBox VMs -> host1-vm_default...(VM 폴더) -> 내용물(VM 관련 파일)
* Vagrant Project(가상 머신을 만들고 초기화 시키는 설정 정보가 들어있는 프로젝트)
* VirtualBOX VM-> Vagrant 프로젝트에 따라 생성된 VM

```
사용자>host폴더>vm-project>centos1>vagrant destroy

```


<h1>CVS vs SVN vs GIT</h1>


## CVS(Concurrent Versions System)중앙 집중 관리 시스템


* server Repo.(in Project file) <- check in(commit)Checkout File-> Local(프로젝트 파일)
* Check in - 최신 버전의 파일을 가져온다.
* commit시 파일을 모두 서버에 전송 -> Overhead 발생(과부하)-> network를 과다 사용 (변경내용 외에 기존 내용까지 전송하기 때문에)
* 서버에서 변경내역 관리 -> 중앙 집중 방식 -> 서버에 문제 발생시 변경 내역을 모두 잃음




## SVN(subversion) 중앙 집중 관리 시스템


* Commit(checkin)-> 파일의 변경 부분만 서버에 전송하기 때문에 CVS 방식 보다 Network Overhead가 적음
* 중앙 집중식이기 때문에 CVS와 마찬가지로 서버에 문제 발생될 경우 변경 내역을 모두 잃음




## Git(분산관리시스템)


* Git과 Github는 완전 다름 (커피와 카페 느낌)
* 서버에서 로컬로 Repo.를 똑같이 Clone함
* 로컬에서 서버로 Repo.를 똑같이 Push함
* 저장소를 클라이언트 쪽에 분산 복제가 가능함-> 서버에 문제가 발생하더라도 Client쪽에 분산 복제된 Repo.를 사용하여 원상태로 복원 가능함
* 변경 내역을 변경 후 Commit을 하게되면 로컬 Repo.에 저장됨
* 타인과의 공유가 필요할 경우에 서버에 Push를 하기에 Network Overhead가 적음




## RCS(Revision Control System)(CVS, SVN)


* RCS(Revision Control System) 는 개발자가 혼자 개발을 하여 관리할 경우 로컬 버전 관리 시스템을 사용함
* 버전 관리 시스템은 체크아웃을 할 경우 파일의 마지막 스냅샷(Snapshot)을 받는다.
* 스냅샷(snapshot)이란? 특정 시점의 파일 버전을 기록한 것.
* 로컬(local)은 한 개의 스냅샷만 유지한다.
* 만약 서버에 문제가 생기면 모든 내력(History)을 잃는다
* 로컬에 있는 스냅샷 중에서 최신 버전으로 복구한다.




## Git Local 저장소와 작업 디렉토리

* ~/git/bitcamp-study/.git/ = 로컬 저장소:변경내역이 들어있음 전송시 최신 스냅샷(Snapshot)의 파일을 꺼낸다
* ~/git/bitcamp-study/other/ <- 작업 디렉토리
* docs/, .gitignore, README.md = .git 저장소에서 꺼낸 파일 및 디렉토리
* 로컬 저장소는 git client가 관리하는 폴더, 사용자가 직접 편집하면 안됨
* 특정 버전의 Snapshot을 꺼낼 수 있다

## git 명령

```
 git config --system
 git config --global
 git config -l
 git config -list
 ```
 <br>

 ## git 사용법 <br>
 ---
 
 ### Local git 저장소 만들기

 <br>


```
[vagrant@host1~]cd git
[vagrant@host1 git]mkdir bitcamp-ncp
[vagrant@host1 git]cd git/bitcamp-ncp
[vagrant@host1 bitcamp-ncp]git init
[vagrant@host1 bitcamp-ncp]ls -al
```
* 저장소로 사용할 디렉토리 생성
* git 저장소 디렉토리로 만든다

## 파일 탐색 tree, nano, git 만들기

```
sudo yum install -y git
sudo yum install -y nano
sudo yum install -y tree
```

### git으로 관리하지 않을 파일 지정하는 법

```
[vagrant@host1 bitcamp-ncp]vi .gitignore
# .gitignore
esc
shift+:
wq
Enter
[vagrant@host1 bitcamp-ncp]cat .gitignore
[vagrant@host1 bitcamp-ncp]sudo yum install -y nano
```

# .gitignore File

* git 저장소에 보관하지 않을 대상을 지정하는 것이.gitignore File
* ex)도구를 실행할 때 마다 자동 생성하는 파일 및 폴더 (.class, exe, bin/, build/)
* 기존 프로젝트 저장소에 설정된 파일을 가져와서 편집하는 것이 best
* .gitignore File을 자동 생성해 주는 사이트를 이용하는 것

* gitignore.io는 gitignore 자동 생성 사이트 주소
* Windows, macOS, Linux, Gradle, Java, VisualStudioCode, Eclipse, (제외 해야하는 파일을 모르는 경우 기존 회사의 프로젝터에게 복사해서 붙여넣기) 

```
[vagrant@host1 bitcamp-ncp]nano .gitignore

# Created by https://www.toptal.com/developers/gitignore/api/windows,macos,linux,gradle,java,visualstudiocode,eclipse
# Edit at https://www.toptal.com/developers/gitignore?templates=windows,macos,linux,gradle,java,visualstudiocode,eclipse

### Eclipse ###
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders

# External tool builders
.externalToolBuilders/

# Locally stored "Eclipse launch configurations"
*.launch

# PyDev specific (Python IDE for Eclipse)
*.pydevproject

# CDT-specific (C/C++ Development Tooling)
.cproject

# CDT- autotools
.autotools

# Java annotation processor (APT)
.factorypath

# PDT-specific (PHP Development Tools)
.buildpath

# sbteclipse plugin
.target

# Tern plugin
.tern-project

# TeXlipse plugin
.texlipse

# STS (Spring Tool Suite)
.springBeans

# Code Recommenders
.recommenders/

# Annotation Processing
.apt_generated/
.apt_generated_test/

# Scala IDE specific (Scala & Java development for Eclipse)
.cache-main
.scala_dependencies
.worksheet

# Uncomment this line if you wish to ignore the project description file.
# Typically, this file would be tracked if it contains build/dependency configurations:
#.project

### Eclipse Patch ###
# Spring Boot Tooling
.sts4-cache/

### Java ###
# Compiled class file
*.class

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

### Linux ###
*~

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

### macOS ###
# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

### macOS Patch ###
# iCloud generated files
*.icloud

### VisualStudioCode ###
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Built Visual Studio Code Extensions
*.vsix

### VisualStudioCode Patch ###
# Ignore all local history of files
.history
.ionide

### Windows ###
# Windows thumbnail cache files
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

### Gradle ###
.gradle
**/build/
!src/**/build/

# Ignore Gradle GUI config
gradle-app.setting

# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
!gradle-wrapper.jar

# Avoid ignore Gradle wrappper properties
!gradle-wrapper.properties

# Cache of project
.gradletasknamecache

# Eclipse Gradle plugin generated files
# Eclipse Core
.project
# JDT-specific (Eclipse Java Development Tools)
.classpath

### Gradle Patch ###
# Java heap dump
*.hprof

# End of https://www.toptal.com/developers/gitignore/api/windows,macos,linux,gradle,java,visualstudiocode,eclipse

ctrl + o Enter ctrl + x
[vagrant@host1 bitcamp-ncp]cat .gitignore
```
## git clone 이미 했다는 가정하에 

## git add(file)

```
[vagrant@host1 bitcamp-ncp]ls
[vagrant@host1 bitcamp-ncp]ls -al
[vagrant@host1 bitcamp-ncp]nano a.txt
1111 ctrl + o enter ctrl + x
[vagrant@host1 bitcamp-ncp]git status
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]git add .gitignore
[vagrant@host1 bitcamp-ncp]git status --short
```
* git status - 작업 파일의 상태
* ~/git/bitcamp-ncp/.git/
*                        /.gitignore
*                        /a.txt
* (Repo.)모든 저장소(main)은 변경 내역을 관리하는 기본 트랙을 갖고있다
* 뒤에 --short를 붙여 간략하여 볼 수 있음
* git add .gitignore 를 하는 순간 A  .gitignore ?? a.txt로 표시됨을 확인할 수 있다 A, ? : staging area 상태 ? -untracked

```
[vagrant@host1 bitcamp-ncp]git commit -m "1com"
[vagrant@host1 bitcamp-ncp]nano b.txt
1111 ctrl + o enter ctrl + x
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]git commit -m "2com"
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]nano a.txt
2222 ctrl + o enter ctrl + x
[vagrant@host1 bitcamp-ncp]git status --short
M a.txt
?? b.txt
[vagrant@host1 bitcamp-ncp]git add b.txt
[vagrant@host1 bitcamp-ncp]git status --short
( M a.txt)
(A  b.txt)
[vagrant@host1 bitcamp-ncp]git commit -m "3com"
[vagrant@host1 bitcamp-ncp]git status --short
( M a.txt)
[vagrant@host1 bitcamp-ncp]nano b.txt
2222 ctrl + o enter ctrl + x
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]git add a.txt
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]git commit -m "4com"
[vagrant@host1 bitcamp-ncp]git add b.txt
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]nano b.txt
3333 ctrl + o enter ctrl + x
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]git commit -m "5com"
[vagrant@host1 bitcamp-ncp]git status --short
[vagrant@host1 bitcamp-ncp]git add b.txt
[vagrant@host1 bitcamp-ncp]git commit -m "6com"
[vagrant@host1 bitcamp-ncp]git log

```
* 영국 표준 시간으로 표시

## commit hash 값

* 각 commit을 구분하기 위한 식별자
* a.txt b.txt c.txt 의 변경 내용에 대한 hash 알고리즘(계산) 연산 수행으로 나온 결과 값을 hash code 라고 한다.
* 데이터의 크기에 상관없이 256bit, 512bit, 1024bit, 등의 정수 값이다
* 데이터를 입력받아 hash 값을 리턴하는 수학 공식
* 데이터의 크기가 커지면 비교 횟수도 많아지고 그만큼 속도가 느려진다.
* 그것을 해결하기 위해 데이터 식별 ID를 사용함
* MD4 MD5 SHA-1 SHA-256 SHA-512 에 대해 공부
* 파일 공유 및 분산 다운로드

## 디지털 지문 사용 예시

* 파일 검증할 경우
* hash 계산을 통해 hash 값(hash code)을 공지함.
* 256, 512, 1024bit 데이터의 크기에 상관없이 등의 정수값
* tomcat download

```
c:|User|username>certutil -hashfile apache-tomcat-9.0.69.zip sha512
```
* Hash Value = "데이터 식별자로 사용함" - 디지털 지문이라고 야기함
* 데이터 구분 or 데이터 위변조 검사시 사용
* git도 이것을 사용함
* 변경 내용이 있고 aaa 해쉬값이 있을경우 내용을 다시 수정한다면 aab와 같이 재계산된 값이 나타남
* Commit 한 이후에 변경 내용을 바꿀 수 없음 = 삽입한 해킹 코드를 제거하거나 잘못을 감추기 위해 변경 안한 것처럼 만듦

```
[vagrant@host1 bitcamp-ncp]git log -p -2
[vagrant@host1 bitcamp-ncp]git log --oneline
[vagrant@host1 bitcamp-ncp]git log --oneline --graph --all
```
git pro2 목차 1~3 페이지 요약본..

```
             working directory| staging Area | .git directory(Repository
     [untracked][unmodified][modified]|[staged]|[committed]
```
## git remote

* 레파지토리 생성 bitcamp-ncp
* add README.md
* branch name 을 master에서 main으로 변경

```
[vagrant@host1 bitcamp-ncp]git branch -m main
[vagrant@host1 bitcamp-ncp]git remote add origin https://github.com/username/bitcamp-ncp
[vagrant@host1 bitcamp-ncp]git remote
[vagrant@host1 bitcamp-ncp]git remote show origin
[vagrant@host1 bitcamp-ncp]git pull origin main
[vagrant@host1 bitcamp-ncp]git push --set-upstream origin main
```

<br><br><br>

<div id="disqus_thread"></div>
<script>
    /**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
    /*
    var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
    };
    */
    (function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = 'https://melonweb.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
    })();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>